image:
  repository: docker-private.packages.nuxeo.com/nuxeo/nuxeo
  tag: 2023
  pullSecrets: []
  pullPolicy: IfNotPresent
## Nuxeo architecture, among:
## - singleNode: a single Nuxeo node with workers and stream processing enabled
## - api-worker:
##   - `replicaCount` API nodes: handling HTTP requests, with workers and stream processing disabled
##   - `workerCount` worker nodes: not handling HTTP requests, with workers and stream processing enabled
architecture: singleNode
strategy:
  # Can be replaced by Recreate. Useful to sequence a pod upgrade and avoid any pvc issue with two overlapping instances.
  type: RollingUpdate
replicaCount: 1
# workerCount: 1
clusterDomain: cluster.local
# Virtual host nuxeo.conf property, if not retrieved from the Ingress configuration.
virtualHost:
podLabels: {}
podAnnotations: {}
nodeSelector: {}
affinity: {}
tolerations: []
resources:
  requests:
    cpu: 0.5
    memory: 2Gi
  limits:
    memory: 2Gi
service:
  labels: {}
  annotations: {}
  type: ClusterIP
  externalPort: 80
  internalPort: 8080
  protocol: TCP
  ## List of extra service ports.
  extraPorts: []
## List of extra `containerPort`s for the nuxeo container.
extraContainerPorts: []
probePath: /nuxeo/runningstatus
# Nuxeo pods will be restarted if probe fails during 1 minute
livenessProbe:
  # deprecated since 3.1.0, this parameter is now ignored by Kubernetes due to the startup probe
  # initialDelaySeconds:
  periodSeconds: 5
  successThreshold: 1
  timeoutSeconds: 4
  failureThreshold: 12
# Nuxeo pods will stop receiving traffic if probe fails during 15s
readinessProbe:
  # deprecated since 3.1.0, this parameter is now ignored by Kubernetes due to the startup probe
  # initialDelaySeconds:
  periodSeconds: 5
  successThreshold: 1
  timeoutSeconds: 4
  failureThreshold: 3
# Nuxeo pods will be started if probe succeeds once 30s after container startup
startupProbe:
  initialDelaySeconds: 30
  periodSeconds: 5
  successThreshold: 1
  timeoutSeconds: 4
  failureThreshold: 20
## List of Nuxeo packages to install at startup, separated by a space.
## For instance:
## ```
## packages: nuxeo-web-ui nuxeo-drive
## ```
packages: ""
## Nuxeo CLID, required for package installation.
## Can be multiline, using |-.
clid: ""
mongodb:
  enabled: false
  dbName: ""
  protocol: mongodb
  # deprecated since 3.1.0, use auth object instead
  # credentials:
  host: ""
  port: 27017
  # when set it overrides values from mongodb.host and mongodb.port
  url: ""
  auth:
    enabled: false
    username: ""
    password: ""
    # existing secret with MongoDB credentials (keys: mongodb-username, mongodb-password)
    # NOTE: When it's set the previous parameters are ignored.
    existingSecret: ""
  initContainer:
    repository: busybox
    tag: latest
    imagePullPolicy: IfNotPresent
    securityContext: {}
postgresql:
  enabled: false
  dbName: ""
  host: ""
  port: 5432
  # deprecated since 3.1.0, use auth object instead
  # username:
  # deprecated since 3.1.0, use auth object instead
  # password:
  auth:
    username: ""
    password: ""
    # existing secret with PostgreSQL credentials (keys: postgresql-username, postgresql-password)
    # NOTE: When it's set the previous parameters are ignored.
    existingSecret: ""
  initContainer:
    repository: busybox
    tag: latest
    imagePullPolicy: IfNotPresent
    securityContext: {}
elasticsearch:
  enabled: false
  indexName: ""
  protocol: http
  host: ""
  port: 9200
  clusterName: elasticsearch
  indexNumberOfReplicas: 0
  restClient:
    socketTimeoutMs: 300000
    connectionTimeoutMs: 300000
  # deprecated since 3.1.0, use auth object instead
  basicAuth:
    enabled: false
    # username:
    # password:
  ## To configure Basic Authentication, see https://doc.nuxeo.com/nxdoc/search-setup/#basic-authentication.
  auth:
    enabled: false
    username: ""
    password: ""
    # existing secret with Elasticsearch credentials (keys: elasticsearch-username, elasticsearch-password)
    # NOTE: When it's set the previous parameters are ignored.
    existingSecret: ""
  httpReadOnly:
    ## Allows to enable the Elasticsearch Pass-through, see https://doc.nuxeo.com/nxdoc/elasticsearch-passthrough/.
    enabled: false
  initContainer:
    repository: busybox
    tag: latest
    imagePullPolicy: IfNotPresent
    securityContext: {}
kafka:
  enabled: false
  host: ""
  port: 9092
  auth:
    # enable SASL authentication to kafka
    enabled: false
    username: ""
    password: ""
    # existing secret with Kafka credentials (keys: kafka-username, kafka-password)
    # NOTE: When it's set the previous parameters are ignored.
    existingSecret: ""
  initContainer:
    repository: busybox
    tag: latest
    imagePullPolicy: IfNotPresent
    securityContext: {}
redis:
  enabled: false
## Extra init containers.
initContainers: []
googleCloudStorage:
  enabled: false
  # deprecated since 3.1.0, use auth object instead
  # gcpProjectId:
  # deprecated since 3.1.0, use auth object instead
  # credentials:
  auth:
    projectId: ""
    credentials: ""
    # existing secret with GCS credentials (keys: gcs-project-id, gcs-credentials)
    # NOTE: When it's set the previous parameters are ignored.
    existingSecret: ""
  bucket: ""
  ## The bucket prefix needs to end with /
  bucketPrefix: ""
amazonS3:
  enabled: false
  # deprecated since 3.1.0, use auth object instead
  # accessKeyId:
  # deprecated since 3.1.0, use auth object instead
  # secretAccessKey:
  auth:
    accessKeyId: ""
    secretKey: ""
    # existing secret with Amazon credentials (keys: amazon-s3-access-key-id, amazon-s3-secret-key)
    # NOTE: When it's set the previous parameters are ignored.
    existingSecret: ""
  region: ""
  bucket: ""
  ## The bucket prefix needs to end with /
  bucketPrefix: ""
serviceAccount:
  create: true
  annotations: {}
  # The custom name of the service account to use
  # name:
persistentVolumeStorage:
  enabled: false
  storageClass: ""
  accessModes:
  - ReadWriteOnce
  size: 2Gi
  annotations: {}
  labels: {}
ingress:
  enabled: false
  className: ""
  annotations: {}
  labels: {}
  hostname: ""
  path: ""
  ## TLS configuration, accepts either:
  ## - a list
  ## - a map with `secretName` as a single key, which translates in the `ingress.spec.tls` field to:
  ## ```
  ## tls:
  ## - secretName: `ingress.tls.secretName` value
  ##   hosts:
  ##   - `ingress.hostname` value
  ## ```
  tls:
    # secretName: ""
logs:
  persistence:
    enabled: false
    storageClass: ""
    accessModes:
    - ReadWriteOnce
    size: 2Gi
    annotations: {}
    labels: {}

## Custom properties to be appended to nuxeo.conf.
## This is a map to allow merging several sets of properties from multiple values files.
## The keys MUST be lowercase since they're used as a ConfigMap name.
## The property sets are sorted by key when appended to nuxeo.conf.
## For instance, with the `customProperties` value below and an extra-values.yaml file containing:
## ```
## customProperties:
##   set2: |
##     key1=override
##     key3=value3
## ```
## running `helm install ... --values=extra-values.yaml` will result inside nuxeo.conf in:
## ```
## key1=value1
## key2=value2
## key1=override
## key3=value3
## ```
customProperties: {}
#   set1: |
#     key1=value1
#     key2=value2

## Custom contributions to be moved to nxserver/config.
## This is a map to allow mounting XML contributions within the Nuxeo container.
## The keys MUST represent a valid Nuxeo contribution file, for instance it should end with -config.xml.
customContributions: {}
#  path-segment-config.xml: |
#    <?xml version="1.0"?>
#    <component name="override-path-segment-maxsize">
#      <require>org.nuxeo.ecm.core.api.properties</require>
#      <extension target="org.nuxeo.runtime.ConfigurationService" point="configuration">
#        <property name="nuxeo.path.segment.maxsize">96</property>
#      </extension>
#    </component>

## Custom environment variables to set in the container
## customEnvs allows to define environment variables from a value or a key of a ConfigMap
customEnvs: []

## customEnvsFrom allows to load the content of a ConfigMap as environment variables
customEnvsFrom: []

metrics:
  ## Enable global metrics, also needed for metrics reporters and tracing systems such a Stackdriver
  enabled: true
  streams:
    ## Enable stream metrics reporter for Nuxeo Stream introspection
    enabled: true
  stackDriver:
    ## Enable Stackdriver metrics reporter
    enabled: false
    # gcpProjectId:
    tracing:
      ## Enable Stackdriver tracing system
      enabled: false
      # timeout: 30s

## List of extra containers to run along with the nuxeo one, aka sidecar containers.
extraContainers: []
extraVolumeMounts: []
extraVolumes: []
## Extra secrets to deploy, using non base64-encoded strings.
## This is a map of key value pairs with the key as secret name and the value as secret content.
## The secret content is itself a map of two key value pairs:
## - the secret type
## - the secret data, a map of key value pairs using arbitrary string values (`stringData` field).
## We also support a simpler format for an Opaque secret, where the secret content is directly the `stringData` field.
## For instance:
## ```
## extraStringSecrets:
##   stringsecret1:
##     type: Opaque (default value)
##     data:
##       key1: value1
##       key2: value2
##   stringsecret2:
##     key3: |-
##       multiline
##       value
## ```
# extraStringSecrets: {}
## Same as `extraStringSecrets` except that the secret data uses base64-encoded strings (`data` field).
# extraSecrets: {}

podSecurityContext:
  fsGroup: 1000
containerSecurityContext: {}

## PodDisruptionBudget configuration.
podDisruptionBudget: {
  ## The minimum number of pods that must be available during a disruption.
  ## Can be an absolute number (integer) or a percentage (string).
  ## If set, `maxUnavailable` must not be present.
  ## Example values: 1, 50%.
  # minAvailable: "50%"

  ## The maximum number of pods that can be unavailable during a disruption.
  ## Can be an absolute number (integer) or a percentage (string).
  ## If set, `minAvailable` must not be present.
  ## Example values: 1, 50%.
  # maxUnavailable: 1
}
