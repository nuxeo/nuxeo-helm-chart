{{- $dot := . -}}
{{- range splitList "," (include "nuxeo.nodeTypes" .) }}
{{- $nuxeoNodeType := . -}}
{{- $data := dict "Values" $dot.Values "Chart" $dot.Chart "Release" $dot.Release "nuxeoNodeType" $nuxeoNodeType -}}
{{- with $ }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "nuxeo.fullname" (merge (dict "suffix" "-conf") $data) }}
  labels: {{- include "nuxeo.labels" $data | nindent 4 }}
    role: config
data:
  00-nuxeo.conf: |
    # Helm chart properties
    nuxeo.pod.name=${env:POD_NAME}
    nuxeo.pod.namespace=${env:POD_NAMESPACE}
    nuxeo.pod.uid=${env:POD_UID}
    nuxeo.healthcheck.refresh.interval.seconds={{ min .Values.livenessProbe.periodSeconds .Values.readinessProbe.periodSeconds .Values.startupProbe.periodSeconds }}
    {{- if and .Values.ingress.enabled .Values.ingress.hostname }}
      {{- if .Values.ingress.tls }}
    nuxeo.virtual.host=https://{{ .Values.ingress.hostname }}/
      {{- else }}
    nuxeo.virtual.host=http://{{ .Values.ingress.hostname }}/
      {{- end }}
    {{- else if .Values.virtualHost }}
    nuxeo.virtual.host={{ .Values.virtualHost  }}
    {{- end }}
    nuxeo.stream.work.log.codec=avro
    nuxeo.stream.audit.log.codec=avro
    nuxeo.stream.pubsub.log.codec=avro
    {{- if not .Values.logs.persistence.enabled }}
    nuxeo.append.templates.docker=docker
    {{- end }}
{{- if .Values.mongodb.enabled }}
    {{- $credentials := "" -}}
    {{- if .Values.mongodb.auth.enabled -}}
      {{- $credentials = "${env:NUXEO_MONGODB_USERNAME}:${env:NUXEO_MONGODB_PASSWORD}@" -}}
    {{- else if .Values.mongodb.credentials -}}
      {{- $credentials = printf "%s%s" .Values.mongodb.credentials "@" -}}
    {{- end }}
    nuxeo.append.templates.mongodb=mongodb
{{- if .Values.mongodb.url }}
    nuxeo.mongodb.server={{ .Values.mongodb.protocol }}://{{ $credentials }}{{ .Values.mongodb.url }}
{{- else }}
    nuxeo.mongodb.server={{ .Values.mongodb.protocol }}://{{ $credentials }}{{ .Values.mongodb.host }}:{{ .Values.mongodb.port }}
{{- end }}
    nuxeo.mongodb.dbname={{ template "nuxeo.fullname" . }}
{{- end }}
{{- if .Values.postgresql.enabled }}
    nuxeo.append.templates.postgresql=postgresql
    nuxeo.db.host={{ .Values.postgresql.host }}
    nuxeo.db.port={{ .Values.postgresql.port }}
    nuxeo.db.name={{ template "nuxeo.fullname" . }}
    nuxeo.db.user=${env:NUXEO_POSTGRESQL_USERNAME}
    nuxeo.db.password=${env:NUXEO_POSTGRESQL_PASSWORD}
{{- end }}
{{- if .Values.elasticsearch.enabled }}
    elasticsearch.addressList={{ .Values.elasticsearch.protocol }}://{{ .Values.elasticsearch.host }}:{{ .Values.elasticsearch.port }}
    elasticsearch.clusterName={{ .Values.elasticsearch.clusterName }}
    elasticsearch.indexName={{ template "nuxeo.fullname" . }}
    elasticsearch.indexNumberOfReplicas={{ .Values.elasticsearch.indexNumberOfReplicas }}
    elasticsearch.restClient.socketTimeoutMs={{ .Values.elasticsearch.restClient.socketTimeoutMs }}
    elasticsearch.restClient.connectionTimeoutMs={{ .Values.elasticsearch.restClient.connectionTimeoutMs }}
    {{- if or .Values.elasticsearch.auth.enabled .Values.elasticsearch.basicAuth.enabled }}
    elasticsearch.restClient.username=${env:NUXEO_ELASTICSEARCH_USERNAME}
    elasticsearch.restClient.password=${env:NUXEO_ELASTICSEARCH_PASSWORD}
    {{- end }}
    {{- if .Values.elasticsearch.httpReadOnly.enabled }}
    {{- if or .Values.elasticsearch.auth.enabled .Values.elasticsearch.basicAuth.enabled }}
    elasticsearch.httpReadOnly.baseUrl={{ .Values.elasticsearch.protocol }}://${env:NUXEO_ELASTICSEARCH_USERNAME}:${env:NUXEO_ELASTICSEARCH_PASSWORD}@{{ .Values.elasticsearch.host }}:{{ .Values.elasticsearch.port }}
    {{- else }}
    elasticsearch.httpReadOnly.baseUrl={{ .Values.elasticsearch.protocol }}://{{ .Values.elasticsearch.host }}:{{ .Values.elasticsearch.port }}
    {{- end }}
    {{- end }}
{{- end }}
{{- if .Values.kafka.enabled }}
    kafka.enabled=true
    kafka.bootstrap.servers={{ .Values.kafka.host }}:{{ .Values.kafka.port }}
    {{- if .Values.kafka.auth.enabled }}
    kafka.sasl.enabled=true
    kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="${env:NUXEO_KAFKA_USERNAME}" password="${env:NUXEO_KAFKA_PASSWORD}";
    {{- end }}
    kafka.topicPrefix={{ template "nuxeo.fullname" . }}
    nuxeo.stream.work.enabled=true
    nuxeo.pubsub.provider=stream
{{- end }}
{{- if .Values.redis.enabled }}
    nuxeo.append.templates.redis=redis
    nuxeo.redis.host={{ .Values.redis.host }}
    nuxeo.work.queuing=redis
    nuxeo.redis.enabled=true
{{- end }}
{{- if .Values.googleCloudStorage.enabled }}
    nuxeo.core.binarymanager=org.nuxeo.ecm.core.storage.gcp.GoogleStorageBinaryManager
    nuxeo.gcp.project=${env:NUXEO_GOOGLE_CLOUD_PROJECT_ID}
    nuxeo.gcp.credentials=${env:NUXEO_GOOGLE_CLOUD_CREDENTIALS}
    nuxeo.gcp.storage.bucket={{ .Values.googleCloudStorage.bucket }}
    {{- if .Values.googleCloudStorage.bucketPrefix }}
    nuxeo.gcp.storage.bucket_prefix={{ .Values.googleCloudStorage.bucketPrefix }}
    {{- else }}
    nuxeo.gcp.storage.bucket_prefix={{ template "nuxeo.fullname" . }}/
    {{- end }}
{{- end }}
{{- if .Values.amazonS3.enabled }}
    nuxeo.core.binarymanager=org.nuxeo.ecm.blob.s3.S3BlobProvider
    nuxeo.aws.accessKeyId=${env:NUXEO_AMAZON_S3_ACCESS_KEY_ID}
    nuxeo.aws.secretKey=${env:NUXEO_AMAZON_S3_SECRET_KEY}
    nuxeo.aws.region={{ .Values.amazonS3.region }}
    nuxeo.s3storage.bucket={{ .Values.amazonS3.bucket }}
    {{- if .Values.amazonS3.bucketPrefix }}
    nuxeo.s3storage.bucket_prefix={{ .Values.amazonS3.bucketPrefix }}
    {{- else }}
    nuxeo.s3storage.bucket_prefix={{ template "nuxeo.fullname" . }}/
    {{- end }}
{{- end }}
    metrics.enabled={{ .Values.metrics.enabled }}
{{- if .Values.metrics.enabled }}
    metrics.streams.enabled={{ .Values.metrics.streams.enabled }}
    {{- if .Values.metrics.stackDriver.enabled }}
    metrics.stackdriver.enabled=true
    metrics.stackdriver.gcpProjectId={{ .Values.metrics.stackDriver.gcpProjectId }}
    {{- end }}
    {{- if .Values.metrics.stackDriver.tracing.enabled }}
    tracing.stackdriver.enabled=true
    tracing.stackdriver.gcpProjectId={{ .Values.metrics.stackDriver.gcpProjectId }}
    tracing.stackdriver.timeout={{ .Values.metrics.stackDriver.tracing.timeout }}
    {{- end }}
{{- end }}
{{- if or (gt (int .Values.replicaCount) 1) (include "nuxeo.clustering.enabled" .) }}
    nuxeo.cluster.enabled=true
    nuxeo.cluster.nodeid=${env:POD_UID}
{{- end }}
{{- if eq $nuxeoNodeType "api" }}
    # {{ $nuxeoNodeType }} node: disable workers and stream processing
    nuxeo.stream.processing.enabled=false
    nuxeo.work.processing.enabled=false
{{- else }}
    # {{ $nuxeoNodeType }} node: enable workers and stream processing
    nuxeo.stream.processing.enabled=true
    nuxeo.work.processing.enabled=true
{{- end }}
{{- end }}
{{- end }}
{{- range $key, $val := .Values.customProperties }}
{{- with $ }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "nuxeo.fullname" . }}-conf-{{ $key }}
  labels: {{- include "nuxeo.labels" . | nindent 4 }}
    role: config
data:
  nuxeo-{{ $key }}.conf: |
    # Helm chart properties: {{ $key }}
{{ $val | indent 4 }}
{{- end }}
{{- end }}
