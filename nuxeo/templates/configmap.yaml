{{- $credentials := ternary "" (printf "%s%s" .Values.mongodb.credentials "@") (empty .Values.mongodb.credentials) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "nuxeo.fullname" . }}-conf
  labels:
    app: {{ template "nuxeo.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    role: config
data:
  00-nuxeo.conf: |
    # Helm chart properties
    nuxeo.virtual.host={{ .Values.virtualHost  }}
    nuxeo.stream.work.log.codec=avro
    nuxeo.stream.audit.log.codec=avro
    nuxeo.stream.pubsub.log.codec=avro
{{- if .Values.mongodb.enabled }}
    nuxeo.templates=default,mongodb
    nuxeo.mongodb.server={{ .Values.mongodb.protocol }}://{{ $credentials }}{{ required "mongodb.host is required" .Values.mongodb.host }}:{{ .Values.mongodb.port }}
    nuxeo.mongodb.dbname={{ template "nuxeo.fullname" . }}
{{- end }}
{{- if .Values.postgresql.enabled }}
    nuxeo.templates=default,postgresql
    nuxeo.db.host={{ required "postgresql.host is required" .Values.postgresql.host }}
    nuxeo.db.port={{ .Values.postgresql.port }}
    nuxeo.db.name={{ template "nuxeo.fullname" . }}
    nuxeo.db.user={{ .Values.postgresql.username }}
    nuxeo.db.password={{ .Values.postgresql.password }}
{{- end }}
{{- if .Values.elasticsearch.enabled }}
    elasticsearch.addressList={{ .Values.elasticsearch.protocol }}://{{ required "elasticsearch.host is required" .Values.elasticsearch.host }}:{{ .Values.elasticsearch.port }}
    elasticsearch.clusterName={{ .Values.elasticsearch.clusterName }}
    elasticsearch.indexName={{ template "nuxeo.fullname" . }}
    elasticsearch.indexNumberOfReplicas={{ .Values.elasticsearch.indexNumberOfReplicas }}
    elasticsearch.restClient.socketTimeoutMs={{ .Values.elasticsearch.restClient.socketTimeoutMs }}
    elasticsearch.restClient.connectionTimeoutMs={{ .Values.elasticsearch.restClient.connectionTimeoutMs }}
{{- end }}
{{- if .Values.kafka.enabled }}
    kafka.enabled=true
    kafka.bootstrap.servers={{ required "kafka.host is required" .Values.kafka.host }}:{{ .Values.kafka.port }}
    kafka.topicPrefix={{ template "nuxeo.fullname" . }}
    nuxeo.stream.work.enabled=true
    nuxeo.pubsub.provider=stream
{{- end }}
{{- if .Values.redis.enabled }}
{{- if .Values.mongodb.enabled }}
    nuxeo.templates=default,mongodb,redis
{{- else if  .Values.postgresql.enabled }}
    nuxeo.templates=default,postgresql,redis
{{- else }}
    nuxeo.templates=default,redis
{{- end }}
    nuxeo.redis.host={{ .Values.redis.host }}
    nuxeo.work.queuing=redis
    nuxeo.redis.enabled=true
{{- end }}
{{- if .Values.googleCloudStorage.enabled }}
    nuxeo.core.binarymanager=org.nuxeo.ecm.core.storage.gcp.GoogleStorageBinaryManager
    nuxeo.gcp.project={{ .Values.googleCloudStorage.gcpProject }}
    nuxeo.gcp.credentials={{ .Values.googleCloudStorage.credentials }}
    nuxeo.gcp.storage.bucket= {{ .Values.googleCloudStorage.bucket }}
    {{- if .Values.googleCloudStorage.bucketPrefix }}
    nuxeo.gcp.storage.bucket_prefix={{ .Values.googleCloudStorage.bucketPrefix }}
    {{- else }}
    nuxeo.gcp.storage.bucket_prefix={{ template "nuxeo.fullname" . }}/
    {{- end }}
{{- end }}
{{- if .Values.amazonS3.enabled }}
    nuxeo.core.binarymanager=org.nuxeo.ecm.core.storage.sql.S3BinaryManager
    nuxeo.aws.accessKeyId={{ .Values.amazonS3.accessKeyId }}
    nuxeo.aws.secretKey={{ .Values.amazonS3.secretAccessKey }}
    nuxeo.aws.region={{ .Values.amazonS3.region }}
    nuxeo.s3storage.bucket= {{ .Values.amazonS3.bucket }}
    {{- if .Values.amazonS3.bucketPrefix }}
    nuxeo.s3storage.bucket_prefix={{ .Values.amazonS3.bucketPrefix }}
    {{- else }}
    nuxeo.s3storage.bucket_prefix={{ template "nuxeo.fullname" . }}/
    {{- end }}
{{- end }}
{{- if or (gt (int .Values.replicaCount) 1) (include "nuxeo.cloudProvider.enabled" .) }}
    nuxeo.cluster.enabled=true
    nuxeo.cluster.nodeid=${env:POD_UID}
{{- end }}
{{- range $key, $val := .Values.customProperties }}
{{- with $ }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "nuxeo.fullname" . }}-conf-{{ $key }}
  labels:
    app: {{ template "nuxeo.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    role: config
data:
  nuxeo-{{ $key }}.conf: |
    # Helm chart properties: {{ $key }}
{{ $val | indent 4 }}
{{- end }}
{{- end }}
