{{- if .Values.clid }}
{{ $clidStringData := dict "CLID" .Values.clid }}
{{ template "nuxeo.secret" (merge (dict "dataType" "stringData" "name" (printf "%s-%s" (include "nuxeo.fullname" .) "instance-clid") "data" $clidStringData ) .) }}
{{- end }}
{{- if and (.Values.mongodb.auth.enabled) (not .Values.mongodb.auth.existingSecret) }}
---
{{- $secretName := include "nuxeo.secret.mongodb.name" . -}}
{{- $secretData := dict "mongodb-username" (b64enc .Values.mongodb.auth.username) "mongodb-password" (b64enc .Values.mongodb.auth.password) -}}
{{ template "nuxeo.secret" (merge (dict "dataType" "data" "name" $secretName "data" $secretData) .) }}
{{- end }}
{{- if and (.Values.postgresql.enabled) (not .Values.postgresql.auth.existingSecret) }}
---
{{- $secretName := include "nuxeo.secret.postgresql.name" . -}}
{{- $postgresqlUsername := include "nuxeo.secret.postgresql.auth.username" . -}}
{{- $postgresqlPassword := include "nuxeo.secret.postgresql.auth.password" . -}}
{{- $secretData := dict "postgresql-username" (b64enc $postgresqlUsername) "postgresql-password" (b64enc $postgresqlPassword) -}}
{{ template "nuxeo.secret" (merge (dict "dataType" "data" "name" $secretName "data" $secretData) .) }}
{{- end }}
{{- if or (.Values.elasticsearch.basicAuth.enabled) (and (.Values.elasticsearch.auth.enabled) (not .Values.elasticsearch.auth.existingSecret)) }}
---
{{- $secretName := include "nuxeo.secret.elasticsearch.name" . -}}
{{- $elasticsearchUsername := include "nuxeo.secret.elasticsearch.auth.username" . -}}
{{- $elasticsearchPassword := include "nuxeo.secret.elasticsearch.auth.password" . -}}
{{- $secretData := dict "elasticsearch-username" (b64enc $elasticsearchUsername) "elasticsearch-password" (b64enc $elasticsearchPassword) -}}
{{ template "nuxeo.secret" (merge (dict "dataType" "data" "name" $secretName "data" $secretData) .) }}
{{- end }}
{{- if and (.Values.kafka.auth.enabled) (not .Values.kafka.auth.existingSecret) }}
---
{{- $secretName := include "nuxeo.secret.kafka.name" . -}}
{{- $secretData := dict "kafka-username" (b64enc .Values.kafka.auth.username) "kafka-password" (b64enc .Values.kafka.auth.password) -}}
{{ template "nuxeo.secret" (merge (dict "dataType" "data" "name" $secretName "data" $secretData) .) }}
{{- end }}
{{- if and (.Values.googleCloudStorage.enabled) (not .Values.googleCloudStorage.auth.existingSecret) }}
---
{{- $secretName := include "nuxeo.secret.gcs.name" . -}}
{{- $gcsProjectId := include "nuxeo.secret.gcs.auth.projectId" . -}}
{{- $gcsCredentials := include "nuxeo.secret.gcs.auth.credentials" . -}}
{{- $secretData := dict "gcs-project-id" (b64enc $gcsProjectId) "gcs-credentials" (b64enc $gcsCredentials) -}}
{{ template "nuxeo.secret" (merge (dict "dataType" "data" "name" $secretName "data" $secretData) .) }}
{{- end }}
{{- if and (.Values.amazonS3.enabled) (not .Values.amazonS3.auth.existingSecret) }}
---
{{- $secretName := include "nuxeo.secret.amazonS3.name" . -}}
{{- $amazonS3AccessKeyId := include "nuxeo.secret.amazonS3.auth.accessKeyId" . -}}
{{- $amazonS3SecretKey := include "nuxeo.secret.amazonS3.auth.secretKey" . -}}
{{- $secretData := dict "amazon-s3-access-key-id" (b64enc $amazonS3AccessKeyId) "amazon-s3-secret-key" (b64enc $amazonS3SecretKey) -}}
{{ template "nuxeo.secret" (merge (dict "dataType" "data" "name" $secretName "data" $secretData) .) }}
{{- end }}
{{- range $name, $content := .Values.extraStringSecrets }}
{{- $type := $content.type -}}
{{- $data := $content.data -}}
{{- with $ }}
---
{{ template "nuxeo.secret" (merge (dict "dataType" "stringData" "name" $name "type" $type "data" $data) .) }}
{{- end }}
{{- end }}
{{- range $name, $content := .Values.extraSecrets }}
{{- $type := $content.type -}}
{{- $data := $content.data -}}
{{- with $ }}
---
{{ template "nuxeo.secret" (merge (dict "dataType" "data" "name" $name "type" $type "data" $data) .) }}
{{- end }}
{{- end }}
