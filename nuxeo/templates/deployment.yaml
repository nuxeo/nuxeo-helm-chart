{{- $dot := . -}}
{{- range splitList "," (include "nuxeo.nodeTypes" .) }}
{{- $nuxeoNodeType := . -}}
{{- $data := dict "Values" $dot.Values "Chart" $dot.Chart "Release" $dot.Release "nuxeoNodeType" $nuxeoNodeType -}}
{{- with $ }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nuxeo.fullname" $data }}
  labels: {{- include "nuxeo.labels" $data | nindent 4 }}
spec:
  selector:
    matchLabels: {{- include "nuxeo.selectorLabels" $data | nindent 6 }}
  replicas: {{ ternary (default 1 .Values.workerCount) .Values.replicaCount (eq $nuxeoNodeType "worker") }}
  strategy:
    type: {{ .Values.strategy.type }}
  template:
    metadata:
      labels: {{- include "nuxeo.labels" $data | nindent 8 }}
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        rollme: {{ ternary (randAlphaNum 5 | quote) "unchanged" (eq "true" (include "nuxeo.deployment.roll" .)) }}
{{- with .Values.podAnnotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets: {{ toYaml . | nindent 6}}
      {{- end }}
      serviceAccountName: {{ include "nuxeo.serviceAccountName" . }}
      containers:
      - name: {{ .Chart.Name }}
        {{- with .Values.containerSecurityContext }}
        securityContext: {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.resources }}
        resources: {{- toYaml . | nindent 10 }}
        {{- end }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        {{- with .Values.image.pullPolicy }}
        imagePullPolicy: {{ toYaml . }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
          name: tomcat
        {{- with .Values.extraContainerPorts -}}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          {{- with .Values.livenessProbe.initialDelaySeconds }}
          initialDelaySeconds: {{ toYaml . }}
          {{- end }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          {{- with .Values.readinessProbe.initialDelaySeconds }}
          initialDelaySeconds: {{ toYaml . }}
          {{- end }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        startupProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          {{- with .Values.startupProbe.initialDelaySeconds }}
          initialDelaySeconds: {{ toYaml . }}
          {{- end }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          successThreshold: {{ .Values.startupProbe.successThreshold }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        {{- if .Values.mongodb.auth.enabled }}
        - name: NUXEO_MONGODB_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.mongodb.name" . }}
              key: mongodb-username
        - name: NUXEO_MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.mongodb.name" . }}
              key: mongodb-password
        {{- end }}
        {{- if .Values.postgresql.enabled }}
        - name: NUXEO_POSTGRESQL_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.postgresql.name" . }}
              key: postgresql-username
        - name: NUXEO_POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.postgresql.name" . }}
              key: postgresql-password
        {{- end }}
        {{- if or .Values.elasticsearch.auth.enabled .Values.elasticsearch.basicAuth.enabled }}
        - name: NUXEO_ELASTICSEARCH_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.elasticsearch.name" . }}
              key: elasticsearch-username
        - name: NUXEO_ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.elasticsearch.name" . }}
              key: elasticsearch-password
        {{- end }}
        {{- if .Values.kafka.auth.enabled }}
        - name: NUXEO_KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.kafka.name" . }}
              key: kafka-username
        - name: NUXEO_KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.kafka.name" . }}
              key: kafka-password
        {{- end }}
        {{- if .Values.googleCloudStorage.enabled }}
        - name: NUXEO_GOOGLE_CLOUD_PROJECT_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.gcs.name" . }}
              key: gcs-project-id
        - name: NUXEO_GOOGLE_CLOUD_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.gcs.name" . }}
              key: gcs-credentials
        {{- end }}
        {{- if .Values.amazonS3.enabled }}
        - name: NUXEO_AMAZON_S3_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.amazonS3.name" . }}
              key: amazon-s3-access-key-id
        - name: NUXEO_AMAZON_S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.amazonS3.name" . }}
              key: amazon-s3-secret-key
        {{- end }}
        {{- if .Values.azureBlob.enabled }}
        - name: NUXEO_AZURE_BLOB_ACCOUNT_NAME
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.azureBlob.name" . }}
              key: azure-blob-account-name
        - name: NUXEO_AZURE_BLOB_ACCOUNT_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.secret.azureBlob.name" . }}
              key: azure-blob-account-key
        - name: NUXEO_AZURE_BLOB_CONTAINER
          value: {{ .Values.azureBlob.container | quote }}
        - name: NUXEO_AZURE_BLOB_ENDPOINT_SUFFIX
          value: {{ .Values.azureBlob.endpointSuffix | quote }}
        {{- end }}
{{- if .Values.clid }}
        - name: NUXEO_CLID
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.fullname" . }}-instance-clid
              key: CLID
{{- end }}
{{- with .Values.packages }}
        - name: NUXEO_PACKAGES
          value: {{ . }}
{{- end }}
{{- with .Values.customEnvs }}
{{ toYaml . | indent 8 }}
{{- end }}
        envFrom:
{{- with .Values.customEnvsFrom }}
{{ toYaml . | indent 8 }}
{{- end }}
        volumeMounts:
          - name: nuxeoconf
            mountPath: /etc/nuxeo/conf.d/00-nuxeo.conf
            subPath: 00-nuxeo.conf
          {{- range $key, $val := .Values.customProperties }}
          {{- with $ }}
          - name: nuxeoconf-{{ $key }}
            mountPath: /etc/nuxeo/conf.d/nuxeo-{{ $key }}.conf
            subPath: nuxeo-{{ $key }}.conf
          {{- end }}
          {{- end }}
          {{- if .Values.customContributions }}
          - name: nuxeo-contributions
            mountPath: /etc/nuxeo/contrib.d
          - name: nuxeo-init-script
            mountPath: /docker-entrypoint-initnuxeo.d/init-nuxeo-customContributions.sh
            subPath: init-nuxeo-customContributions.sh
          {{- end }}
          {{- if include "nuxeo.database.enabled" . }}
          - name: nuxeo-init-script
            mountPath: /docker-entrypoint-initnuxeo.d/init-nuxeo-db-template.sh
            subPath: init-nuxeo-db-template.sh
          {{- end }}
          - name: log
            mountPath: /var/log/nuxeo
          {{- if not (include "nuxeo.binary.cloudProvider.enabled" .) }}
          - name: binaries
            mountPath: /var/lib/nuxeo/binaries
          {{- end }}
          {{- if .Values.keyVault.csi.enabled }}
          - name: secrets-store-inline
            mountPath: /mnt/secrets-store
            readOnly: true
          {{- end }}
          {{- with .Values.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
      {{- with .Values.extraContainers }}
      {{- tpl (toYaml .) $dot | nindent 6 }}
      {{- end }}
      initContainers:
{{- if and .Values.mongodb.enabled .Values.mongodb.host }}
      - name: init-mongodb
        image: "{{ .Values.mongodb.initContainer.repository }}:{{ .Values.mongodb.initContainer.tag }}"
        imagePullPolicy: {{ .Values.mongodb.initContainer.imagePullPolicy }}
        command: ['sh', '-c', 'until nc -w1 {{ .Values.mongodb.host }} {{ .Values.mongodb.port }}; do echo "waiting for mongodb"; sleep 2; done;']
        {{- with .Values.mongodb.initContainer.securityContext }}
        securityContext: {{- toYaml . | nindent 10 }}
        {{- end }}
{{- end }}
{{- if .Values.postgresql.enabled }}
      - name: init-postgresql
        image: "{{ .Values.postgresql.initContainer.repository }}:{{ .Values.postgresql.initContainer.tag }}"
        imagePullPolicy: {{ .Values.postgresql.initContainer.imagePullPolicy }}
        command: ['sh', '-c', 'until nc -w1 {{ .Values.postgresql.host }} {{ .Values.postgresql.port }}; do echo "waiting for postgresql"; sleep 2; done;']
        {{- with .Values.postgresql.initContainer.securityContext }}
        securityContext: {{- toYaml . | nindent 10 }}
        {{- end }}
{{- end }}
{{- if .Values.elasticsearch.enabled }}
      - name: init-elasticsearch
        image: "{{ .Values.elasticsearch.initContainer.repository }}:{{ .Values.elasticsearch.initContainer.tag }}"
        imagePullPolicy: {{ .Values.elasticsearch.initContainer.imagePullPolicy }}
        command: ['sh', '-c', 'until nc -w1 {{ .Values.elasticsearch.host }} {{ .Values.elasticsearch.port }}; do echo "waiting for elastic"; sleep 2; done;']
        {{- with .Values.elasticsearch.initContainer.securityContext }}
        securityContext: {{- toYaml . | nindent 10 }}
        {{- end }}
{{- end }}
{{- if .Values.kafka.enabled }}
      - name: init-kafka
        image: "{{ .Values.kafka.initContainer.repository }}:{{ .Values.kafka.initContainer.tag }}"
        imagePullPolicy: {{ .Values.kafka.initContainer.imagePullPolicy }}
        command: ['sh', '-c', 'until nc -w1 {{ .Values.kafka.host }} {{ .Values.kafka.port }}; do echo "waiting for kafka"; sleep 2; done;']
        {{- with .Values.kafka.initContainer.securityContext }}
        securityContext: {{- toYaml . | nindent 10 }}
        {{- end }}
{{- end }}
      {{- with .Values.initContainers }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: nuxeoconf
        configMap:
          name: {{ template "nuxeo.fullname" (merge (dict "suffix" "-conf") $data) }}
      {{- range $key, $val := .Values.customProperties }}
      {{- with $ }}
      - name: nuxeoconf-{{ $key }}
        configMap:
          name: {{ template "nuxeo.fullname" . }}-conf-{{ $key }}
      {{- end }}
      {{- end }}
      {{- if .Values.customContributions }}
      - name: nuxeo-contributions
        configMap:
          name: {{ template "nuxeo.fullname" . }}-contributions
      {{- end }}
      {{- if include "nuxeo.initScripts.needed" . }}
      - name: nuxeo-init-script
        configMap:
          name: {{ template "nuxeo.fullname" . }}-init-script
          defaultMode: 0744
      {{- end }}
      - name: log
        {{- if .Values.logs.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "nuxeo.fullname" . }}-log
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- if not (include "nuxeo.binary.cloudProvider.enabled" .) }}
      - name: binaries
        {{- if .Values.persistentVolumeStorage.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "nuxeo.fullname" . }}-binaries
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- end }}
      {{- if .Values.keyVault.csi.enabled }}
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ .Values.keyVault.csi.providerClass }}
      {{- end }}
      {{- with .Values.extraVolumes }}
      {{- toYaml . | nindent  6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
{{- end }}
