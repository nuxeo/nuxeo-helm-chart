apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nuxeo.fullname" . }}
  labels:
    draft: {{ default "draft-app" .Values.nuxeo.draft }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  selector:
    matchLabels:
      draft: {{ default "draft-app" .Values.nuxeo.draft }}
      app: {{ template "nuxeo.fullname" . }}
  replicas: {{ .Values.nuxeo.replicaCount }}
  template:
    metadata:
      labels:
        draft: {{ default "draft-app" .Values.nuxeo.draft }}
        app: {{ template "nuxeo.fullname" . }}
{{- with .Values.nuxeo.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- if .Values.nuxeo.podAnnotations }}
      annotations:
{{ toYaml .Values.nuxeo.podAnnotations | indent 8 }}
{{- end }}
    spec:
{{- if .Values.nuxeo.image.pullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.nuxeo.image.pullSecrets }}
{{- end }}
      containers:
      - name: {{ .Chart.Name }}
        resources:
          requests:
            memory: "{{ .Values.nuxeo.resources.requests.memory }}"
            cpu: "{{ .Values.nuxeo.resources.requests.cpu }}"
          limits:
            memory: "{{ .Values.nuxeo.resources.limits.memory }}"
            cpu: "{{ .Values.nuxeo.resources.limits.cpu }}"
        image: "{{ .Values.nuxeo.image.repository }}:{{ .Values.nuxeo.image.tag }}"
{{- if .Values.nuxeo.image.pullPolicy }}
        imagePullPolicy: {{ .Values.nuxeo.image.pullPolicy }}
{{- end}}
        ports:
        - containerPort: {{ .Values.nuxeo.service.internalPort }}
        livenessProbe:
          httpGet:
            path: {{ .Values.nuxeo.probePath }}
            port: {{ .Values.nuxeo.service.internalPort }}
          initialDelaySeconds: {{ .Values.nuxeo.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.nuxeo.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.nuxeo.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.nuxeo.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.nuxeo.probePath }}
            port: {{ .Values.nuxeo.service.internalPort }}
          initialDelaySeconds: {{ .Values.nuxeo.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.nuxeo.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.nuxeo.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.nuxeo.readinessProbe.timeoutSeconds }}
        env:
{{- if .Values.nuxeo.clid }}
        - name: NUXEO_CLID
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.fullname" . }}-instance-clid
              key: CLID
{{- end }}
        - name: NUXEO_PACKAGES
          value: {{ .Values.nuxeo.packages }}
{{- if .Values.nuxeo.customEnvs }}
{{ toYaml .Values.nuxeo.customEnvs | indent 8 }}
{{- end }}
        envFrom:
{{- if .Values.nuxeo.customEnvsFrom }}
{{ toYaml .Values.nuxeo.customEnvsFrom | indent 8 }}
{{- end }}
        volumeMounts:
          - name: nuxeoconf
            mountPath: /etc/nuxeo/conf.d/
          - name: binaries
            mountPath: /var/lib/nuxeo/binaries
          - name: log
            mountPath: /var/log/nuxeo
      initContainers:
{{- if .Values.nuxeo.mongodb.enabled }}
      - name: init-mongodb
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.nuxeo.mongodb.host }} {{ .Values.nuxeo.mongodb.port }}; do echo "waiting for mongodb"; sleep 2; done;']
{{- end }}
{{- if .Values.nuxeo.postgresql.enabled }}
      - name: init-postgresql
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.nuxeo.postgresql.host }} {{ .Values.nuxeo.postgresql.port }}; do echo "waiting for postgresql"; sleep 2; done;']
{{- end }}
{{- if .Values.nuxeo.elasticsearch.enabled }}
      - name: init-elasticsearch
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.nuxeo.elasticsearch.host }} {{ .Values.nuxeo.elasticsearch.port }}; do echo "waiting for elastic"; sleep 2; done;']
{{- end }}
{{- if .Values.nuxeo.kafka.enabled }}
      - name: init-kafka
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.nuxeo.kafka.host }} {{ .Values.nuxeo.kafka.port }}; do echo "waiting for kafka"; sleep 2; done;']
{{- end }}
      securityContext:
        fsGroup: 1000
      volumes:
      - name: nuxeoconf
        configMap:
          name: {{ template "nuxeo.fullname" . }}-conf
      - name: binaries
        {{- if .Values.nuxeo.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "nuxeo.fullname" . }}-binaries
        {{- else }}
        emptyDir: {}
        {{- end }}
      - name: log
        {{- if .Values.nuxeo.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "nuxeo.fullname" . }}-log
        {{- else }}
        emptyDir: {}
        {{- end }}
