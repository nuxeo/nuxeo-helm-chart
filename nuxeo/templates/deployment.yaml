apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nuxeo.fullname" . }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  selector:
    matchLabels:
      app: {{ template "nuxeo.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "nuxeo.fullname" . }}
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
      {{- with .Values.podAnnotations }}
      annotations: {{ toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets: {{ toYaml . | nindent 6}}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        resources:
          requests:
            memory: "{{ .Values.resources.requests.memory }}"
            cpu: "{{ .Values.resources.requests.cpu }}"
          limits:
            memory: "{{ .Values.resources.limits.memory }}"
            cpu: "{{ .Values.resources.limits.cpu }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
{{- if .Values.image.pullPolicy }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- end}}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.failureThreshold }}
        env:
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
{{- if .Values.clid }}
        - name: NUXEO_CLID
          valueFrom:
            secretKeyRef:
              name: {{ template "nuxeo.fullname" . }}-instance-clid
              key: CLID
{{- end }}
{{- if .Values.packages }}
        - name: NUXEO_PACKAGES
          value: {{ .Values.packages }}
{{- end }}
{{- if .Values.customEnvs }}
{{ toYaml .Values.customEnvs | indent 8 }}
{{- end }}
        envFrom:
{{- if .Values.customEnvsFrom }}
{{ toYaml .Values.customEnvsFrom | indent 8 }}
{{- end }}
        volumeMounts:
          - name: nuxeoconf
            mountPath: /etc/nuxeo/conf.d/
          - name: log
            mountPath: /var/log/nuxeo
          {{- if not (include "nuxeo.cloudProvider.enabled" .) }}
          - name: binaries
            mountPath: /var/lib/nuxeo/binaries
          {{- end }}
          {{- with .Values.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
      initContainers:
{{- if .Values.mongodb.enabled }}
      - name: init-mongodb
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.mongodb.host }} {{ .Values.mongodb.port }}; do echo "waiting for mongodb"; sleep 2; done;']
{{- end }}
{{- if .Values.postgresql.enabled }}
      - name: init-postgresql
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.postgresql.host }} {{ .Values.postgresql.port }}; do echo "waiting for postgresql"; sleep 2; done;']
{{- end }}
{{- if .Values.elasticsearch.enabled }}
      - name: init-elasticsearch
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.elasticsearch.host }} {{ .Values.elasticsearch.port }}; do echo "waiting for elastic"; sleep 2; done;']
{{- end }}
{{- if .Values.kafka.enabled }}
      - name: init-kafka
        image: busybox
        command: ['sh', '-c', 'until nc -w1 {{ .Values.kafka.host }} {{ .Values.kafka.port }}; do echo "waiting for kafka"; sleep 2; done;']
{{- end }}
      securityContext:
        fsGroup: 1000
      volumes:
      - name: nuxeoconf
        configMap:
          name: {{ template "nuxeo.fullname" . }}-conf
      - name: log
        {{- if .Values.logs.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ template "nuxeo.fullname" . }}-log
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- if not (include "nuxeo.cloudProvider.enabled" .) }}
      - name: binaries
        emptyDir: {}
      {{- end }}
      {{- with .Values.extraVolumes }}
      {{- toYaml . | nindent  6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}